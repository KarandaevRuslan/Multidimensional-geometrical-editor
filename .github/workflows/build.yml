name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            host: linux
            arch: gcc_64
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-linux-x86_64
          - os: windows-latest
            host: windows
            arch: win64_msvc2019_64
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-windows-x86_64
          - os: macos-latest
            host: mac
            arch: clang_64
            cmake_extra: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
            build_dir: build
            artifact_name: NDEditor-macos-x86_64

    steps:
      - uses: actions/checkout@v4
        name: Checkout source

      - name: Install Qt (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-wayland-dev \
            libglu1-mesa-dev libgl1-mesa-dev libopengl-dev qtbase5-dev-tools \
            libfuse2 ninja-build libgtest-dev

      - name: Install Qt (Windows & macOS)
        if: runner.os != 'Linux'
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.6.3
          host:   ${{ matrix.host }}
          target: desktop
          arch:   ${{ matrix.arch }}
          archives: "qtbase qttools"
          cache:  true

      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja

      # 1) Debug + tests
      - name: Configure (Debug + tests)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}" \
              -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_BUILD_TYPE=Debug
          else
            cmake -S . -B "${{ matrix.build_dir }}" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              ${{ matrix.cmake_extra }}
          fi

      - name: Build tests
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build "${{ matrix.build_dir }}" --config Debug --target Test
          else
            cmake --build "${{ matrix.build_dir }}" --target Test
          fi

      - name: Run Google Tests
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./"${{ matrix.build_dir }}"/Debug/Test.exe --gtest_color=yes
          else
            ./"${{ matrix.build_dir }}"/Test --gtest_color=yes
          fi

      # 2) Release
      - name: Configure (Release)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}/rel" \
              -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_BUILD_TYPE=Release
          else
            cmake -S . -B "${{ matrix.build_dir }}/rel" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              ${{ matrix.cmake_extra }}
          fi

      - name: Build NDEditor (Release)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build "${{ matrix.build_dir }}/rel" --config Release --target NDEditor
          else
            cmake --build "${{ matrix.build_dir }}/rel" --target NDEditor
          fi
          
      # 3) Deploy Qt libraries
      - name: Deploy Qt libraries (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # windeployqt уже в PATH благодаря install-qt-action
          windeployqt "${{ matrix.build_dir }}/rel/Release/NDEditor.exe"

      - name: Deploy Qt libraries (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # macdeployqt из qttools в PATH
          macdeployqt "${{ matrix.build_dir }}/rel/NDEditor.app" -verbose=1

      - name: Deploy Qt libraries and create AppImage (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          set -x
          export QT6_INSTALL_DIR=/usr/lib/qt6

          # 1) Install prereqs
          sudo apt-get update
          sudo apt-get install -y libfuse2 qt6-base-dev qt6-tools-dev-tools wget libglib2.0-bin

          # 2) Download the continuous-build linuxdeployqt (this URL won’t 404) 0
          LINUXDEPLOYQT=linuxdeployqt-continuous-x86_64.AppImage
          wget -qO "$LINUXDEPLOYQT" \
            https://github.com/probonopd/linuxdeployqt/releases/download/continuous/$LINUXDEPLOYQT
          chmod a+x "$LINUXDEPLOYQT"

          # 3) (Optional) If your linuxdeployqt doesn’t bundle appimagetool
          APPIMAGETOOL=appimagetool-x86_64.AppImage
          wget -qO "$APPIMAGETOOL" \
            https://github.com/AppImage/AppImageKit/releases/download/continuous/$APPIMAGETOOL
          chmod a+x "$APPIMAGETOOL"

          # 4) Lay out AppDir correctly
          BUILD_REL=build/rel
          APPDIR=$BUILD_REL/AppDir
          rm -rf "$APPDIR"
          mkdir -p \
            "$APPDIR/usr/bin" \
            "$APPDIR/usr/share/applications" \
            "$APPDIR/usr/share/icons/hicolor/256x256/apps"

          # 5) Copy your exec, .desktop & icon
          cp "$BUILD_REL/NDEditor" \
             "$APPDIR/usr/bin/"
          cp "$BUILD_REL/NDEditor.desktop" \
             "$APPDIR/usr/share/applications/"
          cp "$BUILD_REL/ndeditor.png" \
             "$APPDIR/usr/share/icons/hicolor/256x256/apps/NDEditor.png"

          # 6) Bundle Qt6 (via qmake) + other libs/plugins & build the AppImage 1
          ./"$LINUXDEPLOYQT" \
            "$APPDIR/usr/share/applications/NDEditor.desktop" \
            -qmake "$QT6_INSTALL_DIR/bin/qmake" \
            -appimage

          # 7) Move the .AppImage into rel/
          mv NDEditor*.AppImage "$BUILD_REL/"
            
      # 4) Upload from build/rel
      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.build_dir }}/rel/**
          if-no-files-found: error
