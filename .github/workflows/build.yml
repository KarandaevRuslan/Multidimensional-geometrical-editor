name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ===============================
          # 1) Linux (x86‑64)
          # ===============================
          - os: ubuntu-22.04
            host: linux
            arch: gcc_64
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-linux-x86_64
            dist_path: build/rel/NDEditor.AppImage

          # ===============================
          # 2) Linux (ARM64)
          # ===============================
          - os: ubuntu-22.04-arm
            host: linux
            arch: gcc_64           # Debian/Ubuntu arm64 packages share the same arch id
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-linux-arm64
            dist_path: build/rel/NDEditor.AppImage

          # ===============================
          # 3) Windows (x86‑64)
          # ===============================
          - os: windows-latest
            host: windows
            arch: win64_msvc2019_64
            cmake_platform: x64
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-windows-x86_64
            dist_path: build/rel/Release/**

          # ===============================
          # 4) Windows (ARM64)
          # ===============================
          - os: windows-11-arm
            host: windows
            arch: win64_msvc2019_arm64
            cmake_platform: ARM64
            cmake_extra: ""
            build_dir: build
            artifact_name: NDEditor-windows-arm64
            dist_path: build/rel/Release/**

          # ===============================
          # 5) macOS Intel (x86‑64)
          # ===============================
          - os: macos-latest
            host: mac
            arch: clang_64
            cmake_extra: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
            build_dir: build
            artifact_name: NDEditor-macos-x86_64
            dist_path: build/rel/NDEditor.app.tar.gz

          # ===============================
          # 6) macOS Apple Silicon (ARM64)
          # ===============================
          - os: macos-14
            host: mac
            arch: clang_64          # Universal package includes arm64 binaries
            cmake_extra: "-DCMAKE_OSX_ARCHITECTURES=arm64"
            build_dir: build
            artifact_name: NDEditor-macos-arm64
            dist_path: build/rel/NDEditor.app.tar.gz

    steps:
      - uses: actions/checkout@v4
        name: Checkout source

      # === Install Qt (Linux) ===
      - name: Install Qt (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y \
              qtbase5-dev qtchooser qtbase5-dev-tools qtdeclarative5-dev \
              qtquickcontrols2-5-dev qtwebengine5-dev libglu1-mesa-dev libgl1-mesa-dev \
              libopengl-dev libfuse2 ninja-build libgtest-dev libqt5x11extras5-dev \
              build-essential qtcreator qttools5-dev libqt5opengl5-dev mesa-common-dev

      # === Install Qt (macOS/intel & apple‑silicon) ===
      - name: Install Qt (macOS)
        if: runner.os == 'macOS'
        uses: jurplel/install-qt-action@v4
        with:
          dir: ${{ runner.workspace }}
          version: 6.7.3
          host: ${{ matrix.host }}
          target: desktop
          arch: ${{ matrix.arch }}
          archives: "qtbase qttools qtcharts qtwebengine"
          cache: true

      # === Install Qt (Windows x86‑64 & arm64) ===
      - name: Install Qt (Windows x86‑64)
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v4
        with:
          dir: ${{ runner.workspace }}
          version: 6.7.3
          host: ${{ matrix.host }}
          target: desktop
          arch: ${{ matrix.arch }}
          archives: "qtbase qttools qtcharts qtwebengine"
          cache: true

      - name: Install Qt (Windows ARM64)
        if: matrix.os == 'windows-11-arm'
        uses: jurplel/install-qt-action@v4
        with:
          dir: ${{ runner.workspace }}
          version: 6.7.3
          host: ${{ matrix.host }}
          target: desktop
          arch: ${{ matrix.arch }}
          archives: "qtbase qttools qtcharts qtwebengine"
          cache: true
          aqtversion:   '>=3.4.0'
          py7zrversion: '>=0.24.0'

      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja

      # ---------------------------------------------------------------------
      # 1) Debug + tests
      # ---------------------------------------------------------------------
      - name: Configure (Debug + tests)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}" \
              -G "Visual Studio 17 2022" -A ${{ matrix.cmake_platform }} \
              -DCMAKE_BUILD_TYPE=Debug
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_PREFIX_PATH=/usr/lib/qt5 \
              -DCMAKE_MODULE_PATH=/usr/lib/$(uname -m)-linux-gnu/cmake/Qt5/ \
              ${{ matrix.cmake_extra }}
          else
            cmake -S . -B "${{ matrix.build_dir }}" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              ${{ matrix.cmake_extra }}
          fi

      - name: Build tests
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build "${{ matrix.build_dir }}" --config Debug --target Test
          else
            cmake --build "${{ matrix.build_dir }}" --target Test
          fi

      - name: Run Google Tests
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            "${{ matrix.build_dir }}"/Debug/Test.exe --gtest_color=yes
          else
            "${{ matrix.build_dir }}"/Test --gtest_color=yes
          fi

      # ---------------------------------------------------------------------
      # 2) Release build
      # ---------------------------------------------------------------------
      - name: Configure (Release)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}/rel" \
              -G "Visual Studio 17 2022" -A ${{ matrix.cmake_platform }} \
              -DCMAKE_BUILD_TYPE=Release
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            cmake -S . -B "${{ matrix.build_dir }}/rel" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH=/usr/lib/qt5 \
              ${{ matrix.cmake_extra }}
          else
            cmake -S . -B "${{ matrix.build_dir }}/rel" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              ${{ matrix.cmake_extra }}
          fi

      - name: Build NDEditor (Release)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake --build "${{ matrix.build_dir }}/rel" --config Release --target NDEditor
          else
            cmake --build "${{ matrix.build_dir }}/rel" --target NDEditor
          fi

      # ---------------------------------------------------------------------
      # 3) Deploy Qt libraries
      # ---------------------------------------------------------------------
      - name: Deploy Qt libraries (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          windeployqt "${{ matrix.build_dir }}/rel/Release/NDEditor.exe"

      - name: Deploy Qt libraries (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          macdeployqt "${{ matrix.build_dir }}/rel/NDEditor.app" -verbose=1
          tar -czf ${{ matrix.build_dir }}/rel/NDEditor.app.tar.gz -C ${{ matrix.build_dir }}/rel NDEditor.app

      - name: Deploy Qt libraries & create AppImage (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          set -x

          sudo apt-get update
          sudo apt-get install -y libfuse2 wget patchelf desktop-file-utils imagemagick

          sudo ln -sf /usr/lib/qt5/bin/qmake /usr/bin/qmake
          qmake -v

          BUILD_REL=${{ matrix.build_dir }}/rel
          APPDIR=$BUILD_REL/AppDir
          rm -rf "$APPDIR"
          mkdir -p "$APPDIR/usr/bin" "$APPDIR/usr/share/applications" "$APPDIR/usr/share/icons/hicolor/256x256/apps"

          # Copy binary & desktop file
          cp "$BUILD_REL/NDEditor" "$APPDIR/usr/bin/"
          cp NDEditor.desktop "$APPDIR/usr/share/applications/"

          # Ensure we provide a 256×256 PNG icon (linuxdeploy fails on 1024×1024)
          ICON_SRC=images/app_icon.png
          ICON_DST="$APPDIR/usr/share/icons/hicolor/256x256/apps/ndeditor.png"
          convert "$ICON_SRC" -resize 256x256 "$ICON_DST"

          ARCH=$(uname -m)
          if [[ "$ARCH" == "aarch64" ]]; then
            LINUXDEPLOY=linuxdeploy-aarch64.AppImage
            QT_PLUGIN=linuxdeploy-plugin-qt-aarch64.AppImage
            wget -nv "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/$LINUXDEPLOY" -O "$LINUXDEPLOY"
            wget -nv "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/$QT_PLUGIN" -O "$QT_PLUGIN"
            chmod a+x "$LINUXDEPLOY" "$QT_PLUGIN"
            ."/$LINUXDEPLOY" --appdir "$APPDIR" --plugin qt --output appimage \
              --desktop-file "$APPDIR/usr/share/applications/NDEditor.desktop" \
              --icon-file "$ICON_DST"
          else
            LINUXDEPLOYQT=linuxdeployqt-continuous-x86_64.AppImage
            wget -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/$LINUXDEPLOYQT" -O "$LINUXDEPLOYQT"
            chmod a+x "$LINUXDEPLOYQT"
            ."/$LINUXDEPLOYQT" "$APPDIR/usr/share/applications/NDEditor.desktop" -appimage
          fi

          mv NDEditor*.AppImage "$BUILD_REL/"
          FIRST_APPIMG=$(ls build/rel/NDEditor*.AppImage | head -n1 || true)
          if [[ -n "$FIRST_APPIMG" ]]; then
              mv "$FIRST_APPIMG" build/rel/NDEditor.AppImage
          fi

      # ---------------------------------------------------------------------
      # 4) Upload artefacts
      # ---------------------------------------------------------------------
      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.dist_path }}
          if-no-files-found: error
